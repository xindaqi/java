<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- import configure properties file -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
	<bean id="dataSourceOne" class="org.apache.commons.dbcp2.BasicDataSource">
			<property name="driverClassName" value="${one.driver}" />
			<property name="url" value="${one.url}" />
			<property name="username" value="${one.username}" />
			<property name="password" value="${one.password}" />
			<!-- 最大连接数 -->
			<property name="maxTotal" value="30"/>
			<!-- 最大空闲连接数 -->
			<property name="maxIdle" value="10"/>
			<!-- 初始化连接数 -->
			<property name="initialSize" value="5"/>
	</bean>
	<bean id="dataSourceAnother" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${two.driver}" />
		<property name="url" value="${two.url}" />
		<property name="username" value="${two.username}" />
		<property name="password" value="${two.password}" />
		<!-- 最大连接数 -->
		<property name="maxTotal" value="30"/>
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="10"/>
		<!-- 初始化连接数 -->
		<property name="initialSize" value="5"/>
	</bean>

	<bean id="dynamicDataSource" class="com.util.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="dataSourceOne" key="dataSourceOne"></entry>
				<entry value-ref="dataSourceAnother" key="dataSourceAnother"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSourceOne"></property>
	</bean>
	
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
			<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<property name="url" value="jdbc:mysql://localhost:3306/shop?characterEncoding=utf8" />
			<property name="username" value="root" />
			<property name="password" value="123456" /> -->
			<!-- 最大连接数 -->
			<!-- <property name="maxTotal" value="30"/> -->
			<!-- 最大空闲连接数 -->
			<!-- <property name="maxIdle" value="10"/> -->
			<!-- 初始化连接数 -->
			<!-- <property name="initialSize" value="5"/> -->
	<!-- </bean> -->
	<!-- 添加事务支持 -->
	<bean id="txManager"   
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
        <property name="dataSource" ref="dynamicDataSource" />   
    </bean> 
    <!-- 开启事务注解-->
	<tx:annotation-driven transaction-manager="txManager" />
 	<!-- 配置MyBatis工厂，同时指定数据源，并与MyBatis完美整合 -->  
 	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
		<property name="dataSource" ref="dynamicDataSource" /> 
		<!-- <property name="dataSource" ref="dataSource" />   -->
		<!-- configLocation的属性值为MyBatis的核心配置文件 -->
		<!-- classpath: target/classes -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml"/>
		<!-- <property name="mapperLocations" > -->
			<!-- <list> -->
				<!-- <value>classpath:com/datasource/mybatis/admin/*.xml</value> -->
				<!-- <value>classpath:com/datasource/mybatis/before/*.xml</value> -->
				<!-- <value>classpath:com/anotherdatasource/mybatis/bigdata/*.xml</value> -->
			<!-- </list> -->
		<!-- </property> -->
	</bean>
	
	<!-- mulitple package scan -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     	<!-- mybatis-spring组件的扫描器 ，必须写全dao的包名，且只能扫描一个dao包-->
		 <property name="basePackage" value="com.**.dao"/>
		 <!-- <property name="basePackage" value="com/datasource/dao, com/anotherdatasource/dao"/> -->
		 <!-- <property name="basePackage" value="com/datasource/dao"/> -->
     	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
     </bean>

	<!--Mapper代理开发，使用Spring自动扫描MyBatis的接口并装配
 	（Spring将指定包中所有被@Mapper注解标注的接口自动装配为MyBatis的映射接口）  --> 
     <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
     	<!-- mybatis-spring组件的扫描器 ，必须写全dao的包名，且只能扫描一个dao包-->
     	<!-- <property name="basePackage" value="com.dao"/> -->
     	<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
     <!-- </bean> -->
     <!-- 指定需要扫描的包（包括子包），使注解生效。dao包在mybatis-spring组件中已经扫描，这里不再需要扫描-->
	<context:component-scan base-package="com.datasource.service"/>
	<context:component-scan base-package="com.anotherdatasource.service"/>
	<context:component-scan base-package="com.websocket"/>
	<context:component-scan base-package="com.kafka"/>
</beans>
